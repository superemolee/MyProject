using UnityEngine;
using System.Collections;

[System.Serializable]
/// <summary>
/// This class represents the Vitalparameter respiration rate. It triggers in addition a breathanimation and a sound.
/// </summary>
public class VPRespirationRate : VitalPara<int>
{
	/// <summary>
	/// The name of the Object where the Audiosource should be attached. Typically the head bone
	/// </summary>
	public string m_audioTransformName = "Head";
	
	/// <summary>
	/// The breath sound.
	/// </summary>
	public AudioClip m_breathSound;
	
	/// <summary>
	/// The morphing breath channel.
	/// </summary>
	public string m_breathChannelName = "breath";
	
	/// <summary>
	/// The morphing breath channelMaxPercentage.
	/// </summary>
	public float m_breathChannelMaxPercent = 100.0f;
	
	/// <summary>
	/// An indicator if the breath animation should be shown.
	/// </summary>
	public bool m_showBreathAnimation = false;
	
	/// <summary>
	/// The actual time.
	/// </summary>
	private float m_actualTime = 0.0f;
	
	/// <summary>
	/// The time to breath.
	/// </summary>
	private float m_timeToBreath = -1.0f;
	
	/// <summary>
	/// The generated audio source for playing the breathsound.
	/// </summary>
	private AudioSource m_audio;
	
	/// <summary>
	/// The reference to the animation system.
	/// </summary>
	private Animation m_animation;
	
	/// <summary>
	/// The respiration volume of the human in liters.
	/// </summary>
	private float m_respirationVolume;		
	
	/// <summary>
	/// The breath animation clip. Will be generated by <see cref="VPRespirationRate.CalculateBreathAnimation"/>.
	/// </summary>
	private AnimationClip m_breathAnimation;
	
	/// <summary>
	/// The mega morph animation component.
	/// </summary>
	private MegaMorphAnim m_megaMorphAnim;
	
	/// <summary>
	/// The mega morph component.
	/// </summary>
	private MegaMorph m_megaMorph;
	
	
	
	/// <summary>
	/// Initializes a new instance of the <see cref="VPRespirationRate"/> class.
	/// </summary>
	public VPRespirationRate ()
	{
		MINVITALPARA = 1;
		MAXVITALPARA = 120;
	}
		
	/// <summary>
	/// Caclulates the respiration minute volume.
	/// </summary>
	public float RMV 
	{
		get{return (float)initialVitalPara * m_respirationVolume;}
		
	}
		
		

	// Update is called once per frame
	public override bool VPUpdate ()
	{
			
		m_actualTime += Time.deltaTime;
			
			
		if (m_actualTime > m_timeToBreath) {
			//Debug.Log (m_actualTime);
			m_actualTime = 0.0f;
			if (m_breathAnimation && m_showBreathAnimation)
			{
				m_animation.CrossFadeQueued(m_breathAnimation.name);
			}		
			if (m_audio)
			{
				m_audio.Play();
			}	
				
		}
			
			
		return true;
	}

	/// <summary>
	/// Gets or sets the vital para value. Also calculates the respiration sound and animation if the soundlength * respirationfreq > 60
	/// </summary>
	/// <value>
	/// The vital para value.
	/// </value>
	public override int VitalParaVal {
		
		get { return base.VitalParaVal; }
		set {
			if(vitalPara != value)
			{
				if (m_breathAnimation) {
					//the length of the animation doesn't fit in 1 minute so recalculate
					if(m_breathAnimation.length * value > 60)
					{
						CalculateBreathAnimation(60.0f/(float)value);
						
					}
					else{
						CalculateBreathAnimation(m_breathSound!= null ? m_breathSound.length:2.0f);
						
					}
				}
				if (m_breathSound && m_audio)
				{
					if(m_breathSound.length * value > 60)
					{
						 
						m_audio.pitch = ((float)value*m_breathSound.length)/60.0f;
					}
					else{
						m_audio.pitch = 1.0f;
					}
				}	
				base.VitalParaVal = value;
				m_timeToBreath = 60.0f / (float)value;
			}		
		}
	}
	
	
	
	/// <summary>
	/// Calculates the breath animation. It setups the <see cref="VPRespirationRate.m_breathAnimation"/>
	/// </summary>
	/// <param name='timelength'>
	/// Timelength.
	/// </param>
	void CalculateBreathAnimation(float timelength)
	{
		if(m_megaMorphAnim)
		{
			string animname = "breathAnimation";
			if(m_breathAnimation== null)
			{
				m_breathAnimation = new AnimationClip();
				m_breathAnimation.name = animname;
				m_animation.AddClip(m_breathAnimation, m_breathAnimation.name);
				
				m_animation[m_breathAnimation.name].layer = 6;
				m_animation[m_breathAnimation.name].wrapMode = WrapMode.Clamp;
				
				
			}
			AnimationCurve av = new AnimationCurve();
		
			av.AddKey(0.0f,0.0f);
			av.AddKey(timelength/2.0f, m_breathChannelMaxPercent);
			av.AddKey(timelength, 0.0f);
			m_breathAnimation.ClearCurves();
			m_breathAnimation.SetCurve(m_megaMorphAnim.name,typeof(MegaMorphAnim), "Percent", av);
		}
	}
	
	
	/// <summary>
	/// sets the respiration rate of the avatar depending by age. Source "Notfallrettung und Krankentransport"
	/// </summary>
	public override bool InitializeVitalPara (GameObject target, int age, float mass, Gender gender)
	{
		base.InitializeVitalPara (target, age, mass, gender);
		
		//attach audiosource to the specified transform
		Transform[] allChildren = target.GetComponentsInChildren<Transform> ();
		foreach (Transform child in allChildren) {
			if (child.name == m_audioTransformName) {
				m_audio = child.gameObject.AddComponent<AudioSource>();
				m_audio.clip = m_breathSound;
				m_audio.minDistance = 0.1f;
				m_audio.maxDistance = 0.4f;
				m_audio.dopplerLevel = 0.0f;
				m_audio.rolloffMode = AudioRolloffMode.Linear;
				break;
			}
		}
		m_animation = m_avatar.animation;
		
		m_megaMorphAnim = m_avatar.GetComponentInChildren<MegaMorphAnim>();
		if(m_megaMorphAnim)
		{
			m_megaMorph = m_avatar.GetComponentInChildren<MegaMorph>();
			if(m_megaMorph!= null)
			{
				m_megaMorphAnim.SrcChannel = m_breathChannelName;
				m_megaMorphAnim.SetChannel(m_megaMorph,0);
				
			}
		}
		CalculateBreathAnimation(m_breathSound != null ? m_breathSound.length:2.0f);
		
		
		
			
		if (m_age > 6 && m_age < 14) {
			initialVitalPara = Random.Range (16, 20);
			m_respirationVolume = (float)Random.Range (0.300f, 0.400f);
		} else if (m_age >= 14 && m_age < 18) {
			initialVitalPara = Random.Range (16, 20);
			m_respirationVolume = (float)Random.Range (0.300f, 0.500f);
				
		} else if (m_age >= 18) {
			initialVitalPara = Random.Range (12, 18);
			m_respirationVolume = (float)Random.Range (0.500f, 0.800f);
				
		}
		VitalParaVal = (int)initialVitalPara;
			
		MAXVITALPARA = (int)((120.0f + Random.Range (0.0f, 50.0f)) / m_respirationVolume);
			
		if (m_age > 6 && m_age < 12) {
			initialVitalPara = Random.Range (15, 25);
		} else if (m_age >= 12 && m_age < 18) {
			initialVitalPara = Random.Range (16, 20);
		} else if (m_age >= 18) {
			initialVitalPara = Random.Range (12, 18);
		}
		VitalParaVal = (int)initialVitalPara;
		return true;
	}
		
}
	

