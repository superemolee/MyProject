// C# Unity3D HTN-Planner (CUHP), a simple HTN-Planner written in C# for use in Unity3D
// Copyright (C) 2013  Pieterjan van Gastel
// This software is under a GPLv3 license. For details, see the "HTNPlanner.cs"-file.
// If you do not have a copy of the "HTNPlanner.cs"-file, your version of the C# Unity 3D HTN-Planner is incomplete.

using System;
using System.Collections.Generic;
using CsharpHTNplanner;
using UnityEngine;

public class SwapInterface : MonoBehaviour
{
    // FIELDS

    /// <summary>
    /// The item you are holding
    /// </summary>
    private string firstElement = "Apple";

    /// <summary>
    /// The item you want to have
    /// </summary>
    private string secondElement = "Banana";
    
    /// <summary>
    /// The plan
    /// </summary>
    private string plan = "";

    /// <summary>
    /// Denotes if a plan is found
    /// </summary>
    private bool planFound = false;

    /// <summary>
    /// Denotes if the Swap-button is clicked
    /// </summary>
    private bool clicked = false;


    // METHODS

    /// <summary>
    /// OnGUI is called for rendering and handling GUI events.
    /// </summary>
    void OnGUI ()
    {
        GUI.Label(new Rect(10, 10, 400, 20), "Fill in the elements and press the button to swap.");
        
        firstElement = GUI.TextField(new Rect(10, 40, 200, 20), firstElement, 25);

        secondElement = GUI.TextField(new Rect(10, 70, 200, 20), secondElement, 25);

        if (GUI.Button(new Rect(10, 100, 80, 30), "Swap"))
        {
            List<string> planList = null;
            planFound = false;
            clicked = true;

            if (firstElement != "" && secondElement != "")
            {
                HTNPlanner planner = new HTNPlanner(typeof(Domain_Swap), new Domain_Swap().GetMethodsDict(), typeof(Domain_Swap));
                State initialState = new State("state1");
                List<List<string>> goalTasks = new List<List<string>>();

                // creating the planning problem
                initialState.Add("have", firstElement);
                MakeGoalTask(goalTasks, "Swap", firstElement, secondElement);

                planList = planner.SolvePlanningProblem(initialState, goalTasks);
            }

            if (planList != null)
            {
                planFound = true;
                plan = PlanToString(planList);
                Debug.Log(plan);
            }
            else
            {
                Debug.Log("no plan found");
            }
        }

        if (planFound)
        {
            GUI.Label(new Rect(10, 140, 400, 20), "The plan:");

            GUI.Label(new Rect(10, 160, 400, 40), plan);
        }
        else if (clicked)
        {
            GUI.Label(new Rect(10, 140, 400, 20), "No plan found.");
        }

        GUI.Label(new Rect(10, 220, 500, 100), "C# Unity3D HTN-Planner (CUHP)  Copyright (C) 2013  Pieterjan van Gastel" + Environment.NewLine +
            "This program comes with ABSOLUTELY NO WARRANTY. This is free software," + Environment.NewLine + 
            "and you are welcome to redistribute it under certain conditions.");
    }

    /// <summary>
    /// Makes a goal task based on the strings in the values parameter and adds it to the given goal-tasks list (goalTasks).
    /// </summary>
    /// <param name="goalTasks">List of goal tasks for the planning problem</param>
    /// <param name="values">The first string is the goal task name, all other strings are arguments for the goal task</param>
    /// <returns>True if the goal task is added to the list of goal tasks, false if no goal task name is given</returns>
    private bool MakeGoalTask(List<List<string>> goalTasks, params string[] values)
    {
        if (values.Length == 0)
            return false;
        List<string> goalTask = new List<string>();
        goalTask.AddRange(values);
        goalTasks.Add(goalTask);
        return true;
    }

    /// <summary>
    /// Converts a plan generated by an HTN-planner to a single string
    /// </summary>
    /// <param name="plan">The plan in the form of a list</param>
    /// <returns>The plan in the form of a string</returns>
    private string PlanToString(List<string> plan)
    {
        string returnString = "";
        int i = 0;
        // do for every action in plan
        foreach (string s in plan)
        {
            string action = "";
            if (s.Contains(","))
            {
                action = s.Substring(1, s.IndexOf(',') - 1);
                action += ("(" + s.Substring(s.IndexOf(',') + 2));
            }
            else
            {
                action = s.Substring(1, s.IndexOf(')') - 1);
            }
            returnString += (i.ToString() + ". " + action + Environment.NewLine);
            i++;
        }
        return returnString;
    }
}
